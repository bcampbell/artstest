#!/usr/bin/env python
from __future__ import print_function
import yaml
import re
import sys
from pprint import pprint

splitter = re.compile(r'---(.*?)---\s*(.*)$',re.DOTALL)

def main():

    if len(sys.argv)>2:
        # compare two articles
        art_got = Article(sys.argv[1])
        art_expected = Article(sys.argv[2])
        errs = art_got.compare(art_expected)
        if len(errs)>0:
            print('ERRORS - %s' % (art_expected.filename,), file=sys.stderr)
            [print('  %s' % (err,), file=sys.stderr) for err in errs]
    elif len(sys.argv)>1:
        art = Article(sys.argv[1])
        art.dump()
    else:
        print("Missing args: <got> <expected>")


class Article:
    def __init__(self, filename): 
        self.filename=filename
        f = open(filename,"r")
        with f:
            data = f.read()
            m = splitter.match(data)
            meta = yaml.load(m.group(1))
            for f in ("headline","published","updated","authors","canonical_url"):
                if f in meta:
                    self.__dict__[f] = meta[f]
                else:
                    self.__dict__[f] = None
            self.content = m.group(2)

    def dump(self):
        print("canonical_url: %s" % (self.canonical_url))
        print("headline: %s" % (self.headline))
        print("published: %s" % (self.published))
        print("updated: %s" % (self.updated))
        print("authors: %s" % (self.authors))
        print("------")
        print(self.content)

    def compare(self,expected):
        errs = []

        # check headline
        if self.headline != expected.headline:
            errs.append("Headline: expected '%s', got '%s'" %(expected.headline,self.headline))

        # check authors
        for author in expected.authors:
            if self.find_author(author) is None:
                errs.append("missing author: '%s'" % (author['name'],))
        for author in self.authors:
            if expected.find_author(author) is None:
                errs.append("extra author: '%s'" % (author['name'],))

        # TODO: everything else :-)

        return errs

    def find_author(self,author):
        for a in self.authors:
            if a['name'] == author['name']:
                return a
        return None

if __name__ == "__main__":
    sys.exit(main())

